onramp:
  - id: blaster
    type: blaster
    config:
      source: data/data.json.xz
      interval: 4000000 # 250 events/s
    codec: json
  - id: kafka-in
    type: kafka
    codec: json
    config:
      brokers:
        - kafka:9092
      topics:
        - info
        - error
        - snotbadger
      group_id: demo

offramp:
  - id: kafka-error
    type: kafka
    config:
      brokers:
        - kafka:9092
      topic: error
  - id: kafka-info
    type: kafka
    config:
      brokers:
        - kafka:9092
      topic: info
  - id: debug
    type: debug
  - id: elastic
    type: elastic
    config:
      endpoints:
        - http://elastic:9200
  - id: influxdb
    type: rest
    codec: influx
    config:
      endpoints:
        - http://influx:8086/write?db=tremor
      headers:
        'Client': 'Tremor'

pipeline:
  - id: loadgen-info
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: r                                    # We run a tremor_script script with two rules on it
        op: runtime::tremor
        config:
          script: |
            export class, rate;
            short_message=g"*info*" { $class := "info"; $rate := 1000; return; }
      - id: b
        op: grouper::bucket
    links:
      in: [ r ]
      r: [ b ]
      b : [ out ]
  - id: loadgen-error
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: r                                    # We run a tremor_script script with two rules on it
        op: runtime::tremor
        config:
          script: |
            export class, rate;
            short_message=g"*ERROR*" { $class := "error"; $rate := 1000; return; }
      - id: b
        op: grouper::bucket
    links:
      in: [ r ]
      r: [ b ]
      b : [ out ]
  - id: enrich
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: runtime
        op: runtime::tremor
        config:
          script: |
            _ { tags.host := system::hostname(); }
      - id: batch
        op: generic::batch
        config:
          count: 50
    links:
      in: [ runtime ]
      runtime: [ batch ]
      batch: [ out ]
  - id: demo
    interface:
      inputs:
        - in
      outputs:
        - out
    nodes:
      - id: runtime                                    # We run a tremor_script script with two rules on it
        op: runtime::tremor
        config:
          script: |
            export class, rate, index, doc_type;
            _ { $index := "tremor"; $doc_type := "log"; }
            # The first class we define is named `info`,
            # it matches if `short_message`  contains the string `"info"`
            # we configure it to have a rate of 10 events/s 
            short_message=g"*info*" { $class := "info"; $rate := 10; return; }
            # The second class we define is `error`, it matches
            # if  `short_message` contains the string `"ERROR`
            # we configure it to have a rate of 100 events/s 
            short_message=g"*ERROR*" { $class := "error"; $rate := 100; return; }
            # The _ denotes that this will match every event. Since we use 'return'
            # in the previous rules we know that only events that didn't match another
            # rule will arrive here. We're setting class and rate here to 'defaut' and
            # 90 rates.
            _ { $class := "default"; $rate := 90; }
      - id: bucket                                    # Now we limit how much each class is allowed to send per second
        op: grouper::bucket
      - id: bp                                        # Apply back pressure, every time a response is over 100ms we bump the backoff
        op: generic::backpressure
        config:
          timeout: 100
      - id: batch                                     # Batch to 50 events at a time and send them at once
        op: generic::batch
        config:
          count: 50
    links:
      in: [ runtime ]
      runtime: [ bucket ]
      bucket: [ bp ]
      bp: [ batch ]
      batch: [ out ]

binding:
  - id: loadgen-info
    links:
      '/onramp/blaster/{instance}/out': [ '/pipeline/loadgen-info/{instance}/in' ]
      '/pipeline/loadgen-info/{instance}/out': [ '/offramp/kafka-info/{instance}/in' ]
  - id: loadgen-error
    links:
      '/onramp/blaster/{instance}/out': [ '/pipeline/loadgen-error/{instance}/in' ]
      '/pipeline/loadgen-error/{instance}/out': [ '/offramp/kafka-error/{instance}/in' ]
  - id: demo
    links:
      '/onramp/kafka-in/{instance}/out': [ '/pipeline/demo/{instance}/in' ]
      '/pipeline/demo/{instance}/out': [ '/offramp/debug/{instance}/in', '/offramp/elastic/{instance}/in'  ]
  - id: metrics
    links:
      '/pipeline/system::metrics/system/out': [ '/pipeline/enrich/system/in' ]
      '/pipeline/enrich/system/out': [ '/offramp/influxdb/system/in' ]
